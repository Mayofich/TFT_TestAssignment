// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TFT_Test.Data;

#nullable disable

namespace TFT_Test.Migrations
{
    [DbContext(typeof(DirectorListContext))]
    [Migration("20230414093054_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TFT_Test.Models.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ActorId"));

                    b.Property<string>("ActorAdress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActorEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActorPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActorSurname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExpectedFee")
                        .HasColumnType("integer");

                    b.Property<int?>("FilmId")
                        .HasColumnType("integer");

                    b.HasKey("ActorId");

                    b.HasIndex("FilmId");

                    b.ToTable("Actor");
                });

            modelBuilder.Entity("TFT_Test.Models.Director", b =>
                {
                    b.Property<int>("DirectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DirectorId"));

                    b.Property<string>("DirectorEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DirectorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DirectorPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DirectorSurname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DirectorId");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("TFT_Test.Models.Film", b =>
                {
                    b.Property<int>("FilmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FilmId"));

                    b.Property<DateTime?>("EndedFilming")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FilmDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FilmDirectorDirectorId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("FilmLengt")
                        .HasColumnType("interval");

                    b.Property<string>("FilmName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartedFilming")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FilmId");

                    b.HasIndex("FilmDirectorDirectorId");

                    b.ToTable("Film");
                });

            modelBuilder.Entity("TFT_Test.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenreId"));

                    b.Property<int?>("FilmId")
                        .HasColumnType("integer");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GenreId");

                    b.HasIndex("FilmId");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("TFT_Test.Models.Invitation", b =>
                {
                    b.Property<int>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InvitationId"));

                    b.Property<int>("FilmInvitedToFilmId")
                        .HasColumnType("integer");

                    b.Property<int>("InvitedActorActorId")
                        .HasColumnType("integer");

                    b.HasKey("InvitationId");

                    b.HasIndex("FilmInvitedToFilmId");

                    b.HasIndex("InvitedActorActorId");

                    b.ToTable("Invitation");
                });

            modelBuilder.Entity("TFT_Test.Models.Actor", b =>
                {
                    b.HasOne("TFT_Test.Models.Film", null)
                        .WithMany("ConfirmedActors")
                        .HasForeignKey("FilmId");
                });

            modelBuilder.Entity("TFT_Test.Models.Film", b =>
                {
                    b.HasOne("TFT_Test.Models.Director", "FilmDirector")
                        .WithMany("FilmsInProgress")
                        .HasForeignKey("FilmDirectorDirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilmDirector");
                });

            modelBuilder.Entity("TFT_Test.Models.Genre", b =>
                {
                    b.HasOne("TFT_Test.Models.Film", null)
                        .WithMany("FilmGenre")
                        .HasForeignKey("FilmId");
                });

            modelBuilder.Entity("TFT_Test.Models.Invitation", b =>
                {
                    b.HasOne("TFT_Test.Models.Film", "FilmInvitedTo")
                        .WithMany("ActorInvitations")
                        .HasForeignKey("FilmInvitedToFilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TFT_Test.Models.Actor", "InvitedActor")
                        .WithMany()
                        .HasForeignKey("InvitedActorActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilmInvitedTo");

                    b.Navigation("InvitedActor");
                });

            modelBuilder.Entity("TFT_Test.Models.Director", b =>
                {
                    b.Navigation("FilmsInProgress");
                });

            modelBuilder.Entity("TFT_Test.Models.Film", b =>
                {
                    b.Navigation("ActorInvitations");

                    b.Navigation("ConfirmedActors");

                    b.Navigation("FilmGenre");
                });
#pragma warning restore 612, 618
        }
    }
}
